<?xml version="1.0" encoding="utf-8"?>
<DDC 
  CLASS="PKG" 
  KEY="Z_116_PKGACC" 
  MODE="O" 
  xmlns:LINK="ddc:link" 
  xmlns:CFG="ddc:cfg" 
  HASH="75F4E8EEEB82A210B1C481680B198951">
  <PKG 
    NAME="Z_116_PKGACC">
    <LOB_FIELD 
      NAME="HEADER">
      <![CDATA[create or replace package COLVIR.Z_116_PKGACC is
/**
* Пакет для кастомного функционала 116 по счетам
*
* @author Анатолий Бондаренко
* @version 2.0
* @headcom
*
* Copyright (c) 2024 By Aloqabank. All Rights Reserved.
*/


  /** Фунцкия определения возможности отложенной регистарции счетов по ШП из сиспара
  * <br/><i>С версии 1.0</i>
  * @param nAccDepID Идентификатор подразделения счета
  * @param nAccID Идентификатор счета
  * @return Return Результат 0 - не возможна отложенная регистарция счетов, 1 - возможна отложенная регистарция счетов
  */
  function fDclAccWaitResp(
            iAcc_Dep_ID   in T_ACC.DEP_ID%type,
            iAcc_ID       in T_ACC.ID%type
  ) return pls_integer;


  /** Список счетов клиента
  * <br/><i>Появилась в 2.0</i>
  * @param pInput  JSON с ПИНФЛ/ИНН/Код НИББД или Код клиента в АБС
  * @param pOutput JSON со списком счетов клиента
  */
  procedure pGetCliAccList(pInput in clob,
                          pOutput out Clob);

end Z_116_PKGACC;
]]>
    </LOB_FIELD>
    <LOB_FIELD 
      NAME="TEXT">
      <![CDATA[create or replace package body COLVIR.Z_116_PKGACC is
  sObj    constant varchar2(30) := $$PLSQL_UNIT;
  ANL_DEA constant T_ANSIGN.ID%type := T_ASGN.fCode2Id('DEA');

  -- Фунцкия определения возможности отложенной регистарции счетов по ШП из сиспара
  function fDclAccWaitResp(iAcc_Dep_ID   in T_ACC.DEP_ID%type,
                           iAcc_ID       in T_ACC.ID%type
  ) return pls_integer
  as
    cDclCode T_DEACLS_STD.CODE%type;
    nDclID   T_DEACLS_STD.ID%type;
    iRes     pls_integer := 0;
  begin
    -- найдем ШП договора по счету:
    select t.dcl_id into nDclID
      from T_DEA t, LEDACC_DET l
        where l.sgn_id = ANL_DEA
          and l.dep_id = iAcc_Dep_ID and l.acc_id = iAcc_ID
          and to_number(l.pk1) = t.dep_id and to_number(l.pk2) = t.id;
    cDclCode := T_PKGDEA.fDclCode(nDclID);

    if C_PKGPRM.fInList(cDclCode, 'Z_116_NIBBDF_WAITRESPEXCLUDLST') = 1 then
      iRes := 1;
    end if;
    return iRes;
  exception
    when NO_DATA_FOUND then
      t_log.debug('Z_116_PKGACC.fDclAccWaitResp: NO_DATA_FOUND. return 0',sType => 'PKG',sCode => sObj);
      return 0;
  end fDclAccWaitResp;

  -- Список счетов клиента. На вход дается: ПИНФЛ/ИНН/Код клиента в АБС/Код НИББД
  procedure pGetCliAccList(pInput  in clob,
                           pOutput out Clob)
  is
    ObjIn         JSON_OBJECT_T;
    lArr	        JSON_ARRAY_T;
    ObjTmp        JSON_OBJECT_T;
    nCliDepId     G_CLI.DEP_ID%type;
    nCliId        G_CLI.ID%type;
    cIdnNum       G_CLIIDN.IDN_NUM%type;
    cCliCode      G_CLI.CODE%type;

  begin
    Z_116_PKGCONNECT.pOpen();
    ObjIn := JSON_OBJECT_T.parse(pInput);

    if ObjIn.has('idnNum') then
      cIdnNum := ObjIn.get_String('idnNum');
    elsif ObjIn.has('clientId') then
      cCliCode := ObjIn.get_String('clientId');
    else
      t_log.debug('Z_116_PKGACC.pGetCliAccList: не передан идентификационный номер (idnNum) или код клиента (clientId)',sType => 'PKG',sCode => sObj);
      pOutput := Z_116_ELOAN_UTILS.fErr(sqlcode, 'Должен быть передан идентификационный номер (idnNum) или код клиента (clientId) для поиска клиента.');
      return;
    end if;

    if cIdnNum is not null then
      begin
        select c.dep_id, c.id into nCliDepId, nCliId from g_cli c where (c.dep_id, c.id) in
           (select /*+cardinality(tt,1)*/ * from table(G_PKGCLIIDN.fPipeCliLst(cIdnNum, null)) tt);
      exception
        when NO_DATA_FOUND then
          t_log.debug('Z_116_PKGACC.pGetCliAccList: NO_DATA_FOUND for cli by idnnum',sType => 'PKG',sCode => sObj);
          pOutput := Z_116_ELOAN_UTILS.fErr(sqlcode, 'Не найден клиент по идентификационному номеру: %0:s', vargs(cIdnNum));
          return;
      end;
    elsif cCliCode is not null then
      g_pkgcli.pGetCliId(sCode => cCliCode, idDep => nCliDepID, idCli => nCliID, bExcept => true);
    end if;

    lArr := new JSON_ARRAY_T;

    for acc in (
      select /*+ RULE*/
        A.DEP_ID as ACC_DEP_ID,
        A.ID as ACC_ID,
        A.CODE as CODE,
        AH.LONGNAME,
        A.DREG,
        G.CODE as AUT_CODE,
        nvl(A.NIBBDMAINFL, '0') as NIBBDMAINFL,
        ST.LONGNAME as STATE
      from C_DEP D,
        T_BOP_STAT ST, T_PROCESS PR, T_PROCMEM PM,
        LEDACC L, LEDGER_STD PL,
        T_VAL_STD V,
        T_ACCGRP G,
        G_CLI cli,
        G_ACCBLNHST AH,
        G_ACCBLN A
      where A.DEP_ID=D.ID
        and A.CHA_ID=L.ID
        and L.LED_ID+0 = PL.ID
        and V.ID(+)=AH.VAL_ID
        and AH.AUT_ID=G.ID
        and A.ID=AH.ID and A.DEP_ID=AH.DEP_ID and P_OPERDAY between AH.FROMDATE and AH.TODATE
        and PM.ORD_ID = A.ORD_ID
        and PM.DEP_ID = A.DEP_ID
        and PM.MAINFL = '1'
        and AH.CLIDEP_ID = CLI.DEP_ID
        and AH.CLI_ID = CLI.ID
        and PR.ID = PM.ID
        and ST.ID = PR.BOP_ID
        and ST.NORD = PR.NSTAT
        --and (null is null or L.CLIENTFL=null or GL_ACC.cAccAnlValue(A.DEP_ID, A.ID, 1) is not null)
        and (C_PkgGrant.fGetPRMGrnAcc = 0 or exists (select 1 from dual where C_PkgGrant.FChkAccDet(A.dep_id, A.id)=1))
       and 1=1
       and (AH.DEP_ID,AH.ID)= any
      (select DEP_ID,ID from G_ACCBLNHST where CLIDEP_ID= nCliDepID and CLI_ID=nCliID and P_OPERDAY between FROMDATE and TODATE
      union
      select DEP_ID,ACC_ID from LEDACC_DET where SGN_ID in (select * from TABLE(GL_ACC.FCLIANLLST)) and PK1= to_char(nCliDepID) and PK2= to_char(nCliID)
      union
      select m.DEP_ID, m.ID
      from G_ACCMANGR m, G_CLIAUTHPRS p
      where p.PRSDEP_ID = nCliDepID and p.PRS_ID = nCliID
      and m.MNGR_DEP_ID = p.DEP_ID and m.MNGR_ID = p.ID and m.NORD = p.NORD
      and p.NSIGN = C_SIGN_OWNER)
    ) loop

      ObjTmp := new JSON_OBJECT_T;
      ObjTmp.put('code', acc.code);
      ObjTmp.put('nibbdfl', acc.NIBBDMAINFL );
      ObjTmp.put('fromDate', to_char(acc.DREG, 'YYYY-MM-DD') );
      ObjTmp.put('serviceGroup', acc.AUT_CODE );
      ObjTmp.put('state', acc.STATE );
      ObjTmp.put('name', acc.LONGNAME );
      lArr.append(ObjTmp);

    end loop;

    pOutput := lArr.To_Clob;

  exception
    when others then
      pOutput := Z_116_ELOAN_UTILS.fErr(sqlcode, 'Ошибка получения списка счетов клиента (%0:s, %1:s): %2:s', vargs(nCliDepID, nCliID, substr(sqlerrm,1,2000)));

  end pGetCliAccList;

end Z_116_PKGACC;
]]>
    </LOB_FIELD>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="C_DEP"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_ACCBLN"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_ACCBLNHST"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_ACCMANGR"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_CLI"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_CLIAUTHPRS"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_CLIIDN"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="LEDACC"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="LEDACC_DET"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="LEDGER"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_ACC"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_ACCGRP"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_ANSIGN"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_BOP_STAT"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_DEA"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_DEACLS"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_PROCESS"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_PROCMEM"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_VAL"/>
    </PKGDPNENT>
    <PKGDPNFNC>
      <LINK:FNC 
        REF_NAME="P_LOCID"/>
    </PKGDPNFNC>
    <PKGDPNFNC>
      <LINK:FNC 
        REF_NAME="P_OPERDAY"/>
    </PKGDPNFNC>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="C_PKGGRANT"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="C_PKGPRM"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="GL_ACC"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="G_PKGCLI"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="G_PKGCLIIDN"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_ASGN"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_LOG"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_PKGDEA"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="Z_116_ELOAN_UTILS"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="Z_116_PKGCONNECT"/>
    </PKGDPNPKG>
    <PKGDPNDOM>
      <LINK:DOM 
        REF_NAME="G_CLIPRS_NSIGN"/>
    </PKGDPNDOM>
  </PKG>
</DDC>
