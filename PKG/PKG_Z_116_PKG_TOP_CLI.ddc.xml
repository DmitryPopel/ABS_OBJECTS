<?xml version="1.0" encoding="utf-8"?>
<DDC 
  CLASS="PKG" 
  KEY="Z_116_PKG_TOP_CLI" 
  MODE="O" 
  xmlns:LINK="ddc:link" 
  xmlns:CFG="ddc:cfg" 
  HASH="522659FEB51E68AEB7A770B4740BAE10">
  <PKG 
    NAME="Z_116_PKG_TOP_CLI">
    <LOB_FIELD 
      NAME="HEADER">
      <![CDATA[create or replace package COLVIR.Z_116_PKG_TOP_CLI is

  procedure pEXEC(pdDate in date default p_operday);

  procedure pProcessOneChunk(pChunkNum number, pSID number, dOp date);

end Z_116_PKG_TOP_CLI;
]]>
    </LOB_FIELD>
    <LOB_FIELD 
      NAME="TEXT">
      <![CDATA[create or replace package body COLVIR.Z_116_PKG_TOP_CLI is

  nPRLCNT number := 10; --количество параллельных
  nPRLCNTMLT number := 10; --множитель для чанков


  function pProcessOneRow(pRec in out Z_116_TB_TOP_CLI%rowtype, pdDate date) return boolean as
  begin
    pRec.Bal := nvl( T_pkgVal.fCrossRate(
                 nSum => abs(T_pkgAccBal.fAccBal(idDep => pRec.acc_dep_id, idObj => pRec.acc_id, dOp => pdDate, iInpBal => 0,idVal => nvl(pRec.acc_VAL_ID, P_NatVal))),
                 nValId1 => nvl(pRec.acc_VAL_ID, P_NatVal),
                 nValId2 => P_NatVal,
                 p_Date => pdDate), 0);

    return true;
  end;

  procedure pProcessOneChunk(pChunkNum number, pSID number, dOp date) is
    cursor c is
      select * from Z_116_TB_TOP_CLI where SID = pSID and chunknum = pChunkNum for update;
    nRec Z_116_TB_TOP_CLI%rowtype;
  begin
    open c;
    loop
      fetch c into nRec;
      exit when c%notfound;
      if pProcessOneRow(nRec, dOp) then
        update Z_116_TB_TOP_CLI set row = nRec where current of c;
      else
        delete Z_116_TB_TOP_CLI where current of c;
      end if;
    end loop;
    close c;
  end;

  procedure pEXEC(
    pdDate in date default p_operday
    )
  is
    cTask varchar2(100) := 'Z_116_PKG_TOP_CLI';
    l_chunk_sql varchar2(4000);
    l_sql_stmt varchar2(32000);
    nTaskState number;
    nTry number:= 2;
    nMainSID number:= sys_context('USERENV','SID');
  begin

    delete from Z_116_TB_TOP_CLI where SID = nMainSID;
    --удалить не существующие
    delete from Z_116_TB_TOP_CLI where SID not in (SELECT t.SID FROM v$session t);

    insert into Z_116_TB_TOP_CLI (nibbd_code, acc_code, acc_dep_id, acc_id, acc_val_id, SID)
      select case
               when i.idn_num = '00000401' or REGEXP_LIKE(i.idn_num, '^(\d)\1+$') then
                COALESCE((select max(it.idn_num)
                           from ledacc_det lt, G_CLIIDN it, G_IDNDSC_STD st
                          where lt.dep_id = a.dep_id
                            and lt.acc_id = a.id
                            and lt.SGN_ID = t_asgn.fCode2Id(p_code => 'CLIENT')
                            and it.dep_id = cast(lt.PK1 as number)
                            and it.id = cast(lt.PK2 as number)
                            and it.idn_id = st.id
                            and st.code like 'IDN_NIBBD%'
                            and pdDate between it.fromdate and it.todate
                            and NOT REGEXP_LIKE(it.idn_num, '^(\d)\1+$')
                            and it.idn_num = '00000401'),
                         (select /*+ index(d PK_T_DEA)*/
                            max(it.idn_num)
                            from ledacc_det lt, T_DEA d, G_CLIIDN it, G_IDNDSC_STD st
                           where lt.dep_id = a.dep_id
                             and lt.acc_id = a.id
                             and lt.SGN_ID = t_asgn.fCode2Id(p_code => 'DEA')
                             and d.dep_id = cast(lt.PK1 as number)
                             and d.id = cast(lt.PK2 as number)
                             and d.cli_dep_id = it.dep_id
                             and d.cli_id = it.id
                             and pdDate between it.fromdate and it.todate
                             and it.idn_id = st.id
                             and st.code like 'IDN_NIBBD%'
                             and NOT REGEXP_LIKE(it.idn_num, '^(\d)\1+$')),
                           i.idn_num)
                      else
                         i.idn_num
             end nibbd_code,
         a.code,
         a.dep_id,
         a.id,
         ah.val_id,
         nMainSID
    from  G_ACCBLN a,
          G_ACCBLNHST ah,
          LEDACC_STD led,
          G_CLI cli,
          G_CLIIDN i,
          G_IDNDSC_STD s
    where a.DEP_ID = ah.DEP_ID and a.ID = ah.ID
      and pdDate between ah.FROMDATE and ah.TODATE
      and ah.CHA_ID = led.ID
      and ( substr(led.CODE, 1, 3) = any ( select  ready.COLUMN_VALUE ACC_GRP from (vargs('202', '204', '206', '216', '220', '224', '226', '236', '237')) ready )
                or
            substr(led.CODE, 1, 5) = any ( select  ready.COLUMN_VALUE ACC_GRP from (vargs('21032', '21042' ,
                                                                                          '29840', '29801', '29806', '29842', '29846', '29896')) ready ) )
      and ah.CLIDEP_ID = cli.DEP_ID and ah.CLI_ID = cli.ID
      and s.id = i.idn_id
      and s.code like 'IDN_NIBBD%'
      and i.dep_id = cli.dep_id
      and i.id = cli.id
      and pdDate between i.fromdate and i.todate;
    commit;

    update Z_116_TB_TOP_CLI set chunknum = mod(rownum, nPRLCNT*nPRLCNTMLT) where SID = nMainSID;
    commit;

    begin
      dbms_parallel_execute.stop_task(cTask);
      dbms_parallel_execute.drop_task(cTask);
    exception
      when OTHERS then
        null;
    end;

    DBMS_PARALLEL_EXECUTE.CREATE_TASK (cTask);

    l_chunk_sql := 'select distinct chunknum as iStart, SID as iEnd from Z_116_TB_TOP_CLI where SID =' || to_char(nMainSID);

    dbms_parallel_execute.create_chunks_by_SQL(
      task_name => cTask,
      sql_stmt => l_chunk_sql,
      by_rowid => false
    );

    l_sql_stmt := q'[
      declare
        nChunkNum number := :start_id;
        nSID number := :end_id;
        dOp date := to_date(':Dop', 'dd.mm.yyyy');
      begin
        c_pkgconnect.popen(iNotRegist=>1);
        Z_116_PKG_TOP_CLI.pProcessOneChunk(nChunkNum, nSID, dOp);
        commit;
      end;
    ]';

    l_sql_stmt:= replace(l_sql_stmt, ':Dop', to_char(pdDate, 'dd.mm.yyyy'));

    dbms_parallel_execute.run_task(
      task_name => cTask,
      sql_stmt => l_sql_stmt,
      language_flag => DBMS_SQL.NATIVE,
      parallel_level => nPRLCNT
    );
    --состояние по завершению
    nTaskState := dbms_parallel_execute.task_status(cTask);
    while (nTry>0 and nTaskState in (dbms_parallel_execute.crashed, dbms_parallel_execute.finished_with_error))
    loop
      nTry := nTry-1;
      dbms_parallel_execute.resume_task(cTask);
      nTaskState := dbms_parallel_execute.task_status(cTask);
    end loop;

    if nTaskState not in (dbms_parallel_execute.finished, dbms_parallel_execute.chunked )
    then
      t_log.debug('Ошибка при формировании отчета Z_116_TOP_CLI: '||to_char(nTaskState));
      raise_application_error(-20000,Localize('Ошибка при формировании отчета Z_116_KPI_OPER: '||to_char(nTaskState), 'PKG', 'Z_116_PKG_TOP_CLI'));
    else
      dbms_parallel_execute.drop_task(cTask);
    end if;

    commit;
  end;

  procedure pOpen
  as
    pragma autonomous_transaction;
  begin
    if C_PkgSession.idUser is null then
      c_pkgconnect.popen;
    end if;
    commit;
  end;

begin
  popen; -- необходимо для параллелизма хинтом (parallel)

end Z_116_PKG_TOP_CLI;
]]>
    </LOB_FIELD>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_ACCBLN"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_ACCBLNHST"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_CLI"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_CLIIDN"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="G_IDNDSC"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="LEDACC"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="LEDACC_DET"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="T_DEA"/>
    </PKGDPNENT>
    <PKGDPNENT>
      <LINK:ENT 
        REF_NAME="Z_116_TB_TOP_CLI"/>
    </PKGDPNENT>
    <PKGDPNFNC>
      <LINK:FNC 
        REF_NAME="P_NATVAL"/>
    </PKGDPNFNC>
    <PKGDPNFNC>
      <LINK:FNC 
        REF_NAME="P_OPERDAY"/>
    </PKGDPNFNC>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="C_PKGCONNECT"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_ASGN"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_LOG"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_PKGACCBAL"/>
    </PKGDPNPKG>
    <PKGDPNPKG>
      <LINK:PKG 
        REF_NAME="T_PKGVAL"/>
    </PKGDPNPKG>
  </PKG>
</DDC>
